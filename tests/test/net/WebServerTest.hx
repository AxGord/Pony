package net;import massive.munit.util.Timer;import massive.munit.Assert;import massive.munit.async.AsyncFactory;import pony.MUnitHelper;import pony.net.http.HttpConnection;import pony.net.http.WebServer;import pony.net.http.DefaultModulePack;import pony.fs.Dir;import pony.magic.Inform;import pony.fs.SimplePath;import pony.net.http.IHttpConnection;import pony.fs.File;/** * ... * @author AxGord */class WebServerTest extends MUnitHelper{	private var server:WebServer;		public function create():Void {		var d:Dir = new Dir(SimplePath.dir(Inform.file()));		d = d.dir(['home', 'defaults']);		server = new WebServer(d, DefaultModulePack.create());	}		@Test	public function mtpl():Void {		create();		var fc = new FakeConnection('http://localhost:4256/templates?tryTemplate=Arctic');		fc.r = function(type:String, result:String = '', ?d:Dynamic) {			if (type == 'html')				Assert.areEqual('Current template: Arctic FreshDefault Template - Arctic Fresh	}-------------------------------------------[		Default v0.1		Title: Default Template		Author: AxG <axgord@gmail.com>		Web Site: axg.dyndns.info		License: free		Not selected	]-------------------------------------------[		Arctic		Title: Arctic Fresh		E-mail: black@mesa.org		(Default, Flower)		Selected	]-------------------------------------------{', result);			else Assert.fail(type + ': ' + result);			end = true;		};		server.connect(fc);		Assert.isTrue(end);	}		@Test	public function file():Void {		create();		var fc = new FakeConnection('http://localhost:4256/ru/file.txt?tryLanguage=ru');		fc.r = function(type:String, result:String = '', ?d:File) {			if (type == 'send file') {				if (d.ext == 'txt')					Assert.areEqual('Бла-бла-бла', d.content);				else					Assert.fail('file: '+result);			} else				 Assert.fail(type + ': ' + result);			end = true;		};		server.connect(fc);		Assert.isTrue(end);	}		@Test	public function mlang() {		var fc = new FakeConnection('http://localhost:4256/language?tryLanguage=ru');		fc.r = function(type:String, result:String = '', ?d:File) {			if (type == 'html') {				Assert.areEqual('русский, English', result);			} else				 Assert.fail(type + ': ' + result);			end = true;		};		server.connect(fc);		Assert.isTrue(end);	}		@Test	public function tplstatic() {		create();		var fc = new FakeConnection('http://localhost:4256/tpl/Default/test.txt');		fc.r = function(type:String, result:String = '', ?d:File) {			if (type == 'send file') {				if (d.ext == 'txt')					Assert.areEqual('hell-o', d.content);				else					Assert.fail('file: '+result);			} else				 Assert.fail(type + ': ' + result);			end = true;		};		server.connect(fc);		Assert.isTrue(end);	}		@Test	public function urlparse() {		var fc = new FakeConnection('http://localhost:4256/page/qwe?pr1=2&pr2&pr3=5');		Assert.areEqual('2', fc.params.get('pr1'));		Assert.isTrue(fc.params.exists('pr2'));		Assert.areEqual('5', fc.params.get('pr3'));		Assert.areEqual('page/qwe', fc.url);	}		@Test	public function urlparse2() {		var fc = new FakeConnection('http://localhost:4256/page/qwe?pr1=2&pr2');		Assert.areEqual('2', fc.params.get('pr1'));		Assert.isTrue(fc.params.exists('pr2'));		Assert.areEqual('page/qwe', fc.url);	}			@Test	public function asyncmtpl():Void {		create();		var fc = new FakeConnection('http://localhost:4256/templates?tryTemplate=Arctic');		fc.r = function(type:String, result:String = '', ?d:Dynamic) {			if (type == 'html')				Assert.areEqual('Current template: Arctic FreshDefault Template - Arctic Fresh	}-------------------------------------------[		Default v0.1		Title: Default Template		Author: AxG <axgord@gmail.com>		Web Site: axg.dyndns.info		License: free		Not selected	]-------------------------------------------[		Arctic		Title: Arctic Fresh		E-mail: black@mesa.org		(Default, Flower)		Selected	]-------------------------------------------{', result);			else Assert.fail(type + ': ' + result);			end = true;		};		server.connect(fc, true);	}	}class FakeConnection extends HttpConnection, implements IHttpConnection {		dynamic public function r(type:String, result:String='', ?d:Dynamic):Void {		trace(type + ': ' + result);	}		public function sendFile(file:File):Void {		r('send file', file.name, file);	}		public function endAction():Void {		r('refrash');	}		public function error(?message:String):Void {		if (message != null)			r('error', message);		else			r('error');	}		public function sendHtml(text:String):Void {		r('html', text);	}		public function sendText(text:String):Void {		r('text', text);	}	}