class sys.net.Socket{
	public new(method) : Void -> Void

	 = function() = {
		this.__s = sys.net.Socket.socket_new(false);
		this.input = new sys.net._Socket.SocketInput(this.__s);
		this.output = new sys.net._Socket.SocketOutput(this.__s);
	};

	public setTimeout(method) : timeout : Float -> Void

	 = function(timeout:Float) = {
		sys.net.Socket.socket_set_timeout(this.__s,timeout);
	};

	public shutdown(method) : read : Bool -> write : Bool -> Void

	 = function(read:Bool,write:Bool) = {
		sys.net.Socket.socket_shutdown(this.__s,read,write);
	};

	public connect(method) : host : sys.net.Host -> port : Int -> Void

	 = function(host:sys.net.Host,port:Int) = {
		try {
			sys.net.Socket.socket_connect(this.__s,host.ip,port);
		}catch( s : String ) {
			if ((s == "std@socket_connect"))throw "Failed to connect on " + try {
				host.reverse();
			}catch( e : Dynamic ) {
				host.toString();
			} + ":" + port else neko.Lib.rethrow(s));
		};
	};

	public write(method) : content : String -> Void

	 = function(content:String) = {
		sys.net.Socket.socket_write(this.__s,content.__s);
	};

	public close(method) : Void -> Void

	 = function() = {
		sys.net.Socket.socket_close(this.__s);
		{
			this.input.__s = null;
			this.output.__s = null;
		};
		this.input.close();
		this.output.close();
	};

	public output((default,null)) : haxe.io.Output;

	public input((default,null)) : haxe.io.Input;

	__s(var) : sys.net._Socket.SocketHandle;

	static socket_new(var) : Bool -> sys.net._Socket.SocketHandle

	 = neko.Lib.load("std","socket_new",1);

	static socket_close(var) : sys.net._Socket.SocketHandle -> Unknown<33>

	 = neko.Lib.load("std","socket_close",1);

	static socket_write(var) : sys.net._Socket.SocketHandle -> Unknown<35> -> Unknown<34>

	 = neko.Lib.load("std","socket_write",2);

	static socket_connect(var) : sys.net._Socket.SocketHandle -> Int -> Int -> Unknown<36>

	 = neko.Lib.load("std","socket_connect",3);

	static socket_set_timeout(var) : sys.net._Socket.SocketHandle -> Float -> Unknown<37>

	 = neko.Lib.load("std","socket_set_timeout",2);

	static socket_shutdown(var) : sys.net._Socket.SocketHandle -> Bool -> Bool -> Unknown<38>

	 = neko.Lib.load("std","socket_shutdown",3);

}