class Type{
	static public getClass<T : getClass.T>(method) : o : getClass.T -> Class<getClass.T>

	 = function(o:getClass.T) = {
		if ((__dollar__typeof(o) != __dollar__tobject))return null);
		var p = __dollar__objgetproto(o);
		if ((p == null))return null);
		return p.__class__;
	};

	static public getSuperClass(method) : c : Class<Dynamic> -> Class<Dynamic>

	 = function(c:Class<Dynamic>) = {
		return c.__super__;
	};

	static public getClassName(method) : c : Class<Dynamic> -> String

	 = function(c:Class<Dynamic>) = {
		if ((c == null))return null);
		var a = c.__name__;
		return a.join(".");
	};

	static public createInstance<T : createInstance.T>(method) : cl : Class<createInstance.T> -> args : Array<Dynamic> -> createInstance.T

	 = function(cl:Class<createInstance.T>,args:Array<Dynamic>) = {
		return __dollar__call(__dollar__objget(cl,__dollar__hash("new".__s)),cl,args.__neko());
	};

	static public createEmptyInstance<T : createEmptyInstance.T>(method) : cl : Class<createEmptyInstance.T> -> createEmptyInstance.T

	 = function(cl:Class<createEmptyInstance.T>) = {
		var o = __dollar__new(null);
		__dollar__objsetproto(o,cl.prototype);
		return o;
	};

	static public typeof(method) : v : Dynamic -> ValueType

	 = function(v:Dynamic) = {
		return {
			var _g = __dollar__typeof(v);
			switch ((_g)) {case 0: ValueType.TNull,case 1: ValueType.TInt,case 2: ValueType.TFloat,case 3: ValueType.TBool,case 7: ValueType.TFunction,case 5: {
				var c = v.__class__;
				if ((c != null))ValueType.TClass(c) else {
					var e = v.__enum__;
					if ((e != null))ValueType.TEnum(e) else ValueType.TObject);
				});
			},default: ValueType.TUnknown};
		};
	};

	static public enumEq<T : enumEq.T>(method) : a : enumEq.T -> b : enumEq.T -> Bool

	 = function(a:enumEq.T,b:enumEq.T) = {
		if ((a == b))return true);
		try {
			if ((a.__enum__ == null || a.index != b.index))return false);
		}catch( e : Dynamic ) {
			return false;
		};
		{
			var _g1 = 0,_g = cast __dollar__asize(a.args);
			while ((_g1 < _g)) {
				var i = _g1 ++;
				if ((! Type.enumEq(a.args[i],b.args[i])))return false);
			};
		};
		return true;
	};

}