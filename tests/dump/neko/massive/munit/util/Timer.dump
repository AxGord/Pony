class massive.munit.util.Timer{
	public new(method) : time_ms : Int -> Void

	 = function(time_ms:Int) = {
		var me = this;
		this.runThread = neko.vm.Thread.create(function() = {
			me.runLoop(time_ms);
		});
	};

	runLoop(method) : time_ms : Int -> Void

	 = function(time_ms:Int) = {
		var shouldStop = false;
		while ((! shouldStop)) {
			Sys.sleep(time_ms / 1000);
			try {
				this.run();
			}catch( ex : Dynamic ) {
				haxe.Log.trace(ex,{fileName : "Timer.hx",lineNumber : 136,className : "massive.munit.util.Timer",methodName : "runLoop"});
			};
			var msg = neko.vm.Thread.readMessage(false);
			if ((msg == "stop"))shouldStop = true);
		};
	};

	public run(dynamic method) : Void -> Void

	 = function() = {
	};

	public stop(method) : Void -> Void

	 = function() = {
		this.run = function() = {
		};
		this.runThread.sendMessage("stop");
		this.id = null;
	};

	runThread(var) : neko.vm.Thread;

	id(var) : Null<Int>;

	static public delay(method) : f : (Void -> Void) -> time_ms : Int -> massive.munit.util.Timer

	 = function(f:Void -> Void,time_ms:Int) = {
		var t = new massive.munit.util.Timer(time_ms);
		t.run = function() = {
			t.stop();
			f();
		};
		return t;
	};

	static public stamp(method) : Void -> Float

	 = function() = {
		return Sys.time();
	};

}