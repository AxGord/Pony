class massive.munit.client.HTTPClient implements massive.munit.IAdvancedTestResultClient{
	public new(method) : client : massive.munit.ITestResultClient -> ?url : String -> ?queueRequest : Bool -> Void

	 = function(client:massive.munit.ITestResultClient,url:String = "http://localhost:2000",queueRequest:Bool = true) = {
		this.id = "HTTPClient";
		this.client = client;
		this.url = url;
		this.queueRequest = queueRequest;
	};

	onError(method) : msg : String -> Void

	 = function(msg:String) = {
		if ((this.queueRequest)){
			massive.munit.client.HTTPClient.responsePending = false;
			massive.munit.client.HTTPClient.dispatchNextRequest();
		});
		if ((this.get_completionHandler() != null))this.get_completionHandler()(this));
	};

	onData(method) : data : String -> Void

	 = function(data:String) = {
		if ((this.queueRequest)){
			massive.munit.client.HTTPClient.responsePending = false;
			massive.munit.client.HTTPClient.dispatchNextRequest();
		});
		if ((this.get_completionHandler() != null))this.get_completionHandler()(this));
	};

	platform(method) : Void -> String

	 = function() = {
		return "neko";
		return "unknown";
	};

	sendResult(method) : result : Unknown<22> -> Void

	 = function(result:Unknown<22>) = {
		this.request = new massive.munit.client.URLRequest(this.url);
		this.request.setHeader("munit-clientId",this.client.id);
		this.request.setHeader("munit-platformId",this.platform());
		this.request.onData = this.onData;
		this.request.onError = this.onError;
		this.request.data = result;
		if ((this.queueRequest)){
			massive.munit.client.HTTPClient.queue.unshift(this.request);
			massive.munit.client.HTTPClient.dispatchNextRequest();
		} else this.request.send());
	};

	public reportFinalStatistics(method) : testCount : Int -> passCount : Int -> failCount : Int -> errorCount : Int -> ignoreCount : Int -> time : Float -> Dynamic

	 = function(testCount:Int,passCount:Int,failCount:Int,errorCount:Int,ignoreCount:Int,time:Float) = {
		var result = this.client.reportFinalStatistics(testCount,passCount,failCount,errorCount,ignoreCount,time);
		this.sendResult(result);
		return result;
	};

	public addIgnore(method) : result : massive.munit.TestResult -> Void

	 = function(result:massive.munit.TestResult) = {
		this.client.addIgnore(result);
	};

	public addError(method) : result : massive.munit.TestResult -> Void

	 = function(result:massive.munit.TestResult) = {
		this.client.addError(result);
	};

	public addFail(method) : result : massive.munit.TestResult -> Void

	 = function(result:massive.munit.TestResult) = {
		this.client.addFail(result);
	};

	public addPass(method) : result : massive.munit.TestResult -> Void

	 = function(result:massive.munit.TestResult) = {
		this.client.addPass(result);
	};

	public setCurrentTestClass(method) : className : String -> Void

	 = function(className:String) = {
		if ((Std.is(this.client,massive.munit.IAdvancedTestResultClient)))(cast (this.client,massive.munit.IAdvancedTestResultClient)).setCurrentTestClass(className));
	};

	queueRequest(var) : Bool;

	request(var) : massive.munit.client.URLRequest;

	url(var) : String;

	client(var) : massive.munit.ITestResultClient;

	set_completionHandler(method) : value : (massive.munit.ITestResultClient -> Void) -> (massive.munit.ITestResultClient -> Void)

	 = function(value:massive.munit.ITestResultClient -> Void) = {
		return this.completionHandler = value;
	};

	get_completionHandler(method) : Void -> (massive.munit.ITestResultClient -> Void)

	 = function() = {
		return this.completionHandler;
	};

	public completionHandler((get_completionHandler,set_completionHandler)) : massive.munit.ITestResultClient -> Void;

	public id((default,null)) : String;

	static queue(var) : Array<massive.munit.client.URLRequest>

	 = [];

	static responsePending(var) : Bool

	 = false;

	static dispatchNextRequest(method) : Void -> Void

	 = function() = {
		if ((massive.munit.client.HTTPClient.responsePending || massive.munit.client.HTTPClient.queue.length == 0))return);
		massive.munit.client.HTTPClient.responsePending = true;
		var request = massive.munit.client.HTTPClient.queue.pop();
		request.send();
	};

}