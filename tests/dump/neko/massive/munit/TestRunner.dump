class massive.munit.TestRunner implements massive.munit.async.IAsyncDelegateObserver{
	public new(method) : resultClient : massive.munit.ITestResultClient -> Void

	 = function(resultClient:massive.munit.ITestResultClient) = {
		this.clients = new Array();
		this.addResultClient(resultClient);
		this.set_asyncFactory(this.createAsyncFactory());
		this.running = false;
		this.isDebug = false;
	};

	createAsyncFactory(method) : Void -> massive.munit.async.AsyncFactory

	 = function() = {
		return new massive.munit.async.AsyncFactory(this);
	};

	public asyncDelegateCreatedHandler(method) : delegate : massive.munit.async.AsyncDelegate -> Void

	 = function(delegate:massive.munit.async.AsyncDelegate) = {
		this.asyncDelegate = delegate;
	};

	public asyncTimeoutHandler(method) : delegate : massive.munit.async.AsyncDelegate -> Void

	 = function(delegate:massive.munit.async.AsyncDelegate) = {
		var testCaseData = this.activeHelper.current();
		var result = testCaseData.result;
		result.executionTime = massive.munit.util.Timer.stamp() - this.testStartTime;
		result.error = new massive.munit.async.AsyncTimeoutException("",delegate.info);
		this.asyncPending = false;
		this.asyncDelegate = null;
		this.errorCount ++;
		{
			var _g = 0,_g1 = this.clients;
			while ((_g < _g1.length)) {
				var c = _g1[_g];
				++ _g;
				c.addError(result);
			};
		};
		cast $call(this.activeHelper.after,this.activeHelper.test,this.emptyParams.__neko());
		this.execute();
	};

	public asyncResponseHandler(method) : delegate : massive.munit.async.AsyncDelegate -> Void

	 = function(delegate:massive.munit.async.AsyncDelegate) = {
		var testCaseData = this.activeHelper.current();
		testCaseData.test = delegate.runTest;
		testCaseData.scope = delegate;
		this.asyncPending = false;
		this.asyncDelegate = null;
		this.executeTestCase(testCaseData,false);
		cast $call(this.activeHelper.after,this.activeHelper.test,this.emptyParams.__neko());
		this.execute();
	};

	clientCompletionHandler(method) : resultClient : massive.munit.ITestResultClient -> Void

	 = function(resultClient:massive.munit.ITestResultClient) = {
		if ((++ this.clientCompleteCount == this.clients.length)){
			if ((this.completionHandler != null)){
				var successful = this.passCount == this.testCount;
				var handler = this.completionHandler;
				massive.munit.util.Timer.delay(function() = {
					handler(successful);
				},10);
			});
			this.running = false;
		});
	};

	executeTestCase(method) : testCaseData : Dynamic -> async : Bool -> Void

	 = function(testCaseData:Dynamic,async:Bool) = {
		var result = testCaseData.result;
		try {
			var assertionCount = massive.munit.Assert.assertionCount;
			if ((async)){
				cast $call(testCaseData.test,testCaseData.scope,[this.asyncFactory].__neko());
				if ((this.asyncDelegate == null))throw new massive.munit.async.MissingAsyncDelegateException("No AsyncDelegate was created in async test at " + result.get_location(),null));
				this.asyncPending = true;
			} else {
				cast $call(testCaseData.test,testCaseData.scope,this.emptyParams.__neko());
				result.passed = true;
				result.executionTime = massive.munit.util.Timer.stamp() - this.testStartTime;
				this.passCount ++;
				{
					var _g = 0,_g1 = this.clients;
					while ((_g < _g1.length)) {
						var c = _g1[_g];
						++ _g;
						c.addPass(result);
					};
				};
			});
		}catch( e : Dynamic ) {
			if ((async && this.asyncDelegate != null)){
				this.asyncDelegate.cancelTest();
				this.asyncDelegate = null;
			});
			if ((Std.is(e,org.hamcrest.AssertionException)))e = new massive.munit.AssertionException(e.message,e.info));
			if ((Std.is(e,massive.munit.AssertionException))){
				result.executionTime = massive.munit.util.Timer.stamp() - this.testStartTime;
				result.failure = e;
				this.failCount ++;
				{
					var _g = 0,_g1 = this.clients;
					while ((_g < _g1.length)) {
						var c = _g1[_g];
						++ _g;
						c.addFail(result);
					};
				};
			} else {
				result.executionTime = massive.munit.util.Timer.stamp() - this.testStartTime;
				if ((! Std.is(e,massive.munit.MUnitException)))e = new massive.munit.UnhandledException(e,result.get_location()));
				result.error = e;
				this.errorCount ++;
				{
					var _g = 0,_g1 = this.clients;
					while ((_g < _g1.length)) {
						var c = _g1[_g];
						++ _g;
						c.addError(result);
					};
				};
			});
		};
	};

	executeTestCases(method) : Void -> Void

	 = function() = {
		{
			var _g = 0,_g1 = this.clients;
			while ((_g < _g1.length)) {
				var c = _g1[_g];
				++ _g;
				if ((Std.is(c,massive.munit.IAdvancedTestResultClient)))(cast (c,massive.munit.IAdvancedTestResultClient)).setCurrentTestClass(this.activeHelper.className));
			};
		};
		for (testCaseData in this.activeHelper) if ((testCaseData.result.ignore)){
			this.ignoreCount ++;
			{
				var _g = 0,_g1 = this.clients;
				while ((_g < _g1.length)) {
					var c = _g1[_g];
					++ _g;
					c.addIgnore(cast testCaseData.result);
				};
			};
		} else {
			this.testCount ++;
			cast $call(this.activeHelper.before,this.activeHelper.test,this.emptyParams.__neko());
			this.testStartTime = massive.munit.util.Timer.stamp();
			this.executeTestCase(testCaseData,testCaseData.result.async);
			if ((! this.asyncPending))cast $call(this.activeHelper.after,this.activeHelper.test,this.emptyParams.__neko()) else break);
		});
	};

	execute(method) : Void -> Void

	 = function() = {
		{
			var _g1 = this.suiteIndex,_g = this.testSuites.length;
			while ((_g1 < _g)) {
				var i = _g1 ++;
				var suite = this.testSuites[i];
				for (testClass in suite) {
					if ((this.activeHelper == null || this.activeHelper.type != testClass)){
						this.activeHelper = new massive.munit.TestClassHelper(testClass,this.isDebug);
						cast $call(this.activeHelper.beforeClass,this.activeHelper.test,this.emptyParams.__neko());
					});
					this.executeTestCases();
					if ((! this.asyncPending))cast $call(this.activeHelper.afterClass,this.activeHelper.test,this.emptyParams.__neko()) else {
						suite.repeat();
						this.suiteIndex = i;
						return;
					});
				};
			};
		};
		if ((! this.asyncPending)){
			var time = massive.munit.util.Timer.stamp() - this.startTime;
			{
				var _g = 0,_g1 = this.clients;
				while ((_g < _g1.length)) {
					var client = _g1[_g];
					++ _g;
					if ((Std.is(client,massive.munit.IAdvancedTestResultClient)))(cast (client,massive.munit.IAdvancedTestResultClient)).setCurrentTestClass(null));
					client.reportFinalStatistics(this.testCount,this.passCount,this.failCount,this.errorCount,this.ignoreCount,time);
				};
			};
		});
	};

	public run(method) : testSuiteClasses : Array<Class<massive.munit.TestSuite>> -> Void

	 = function(testSuiteClasses:Array<Class<massive.munit.TestSuite>>) = {
		if ((this.running))return);
		this.running = true;
		this.asyncPending = false;
		this.asyncDelegate = null;
		this.testCount = 0;
		this.failCount = 0;
		this.errorCount = 0;
		this.passCount = 0;
		this.ignoreCount = 0;
		this.suiteIndex = 0;
		this.clientCompleteCount = 0;
		massive.munit.Assert.assertionCount = 0;
		this.emptyParams = new Array();
		this.testSuites = new Array();
		this.startTime = massive.munit.util.Timer.stamp();
		{
			var _g = 0;
			while ((_g < testSuiteClasses.length)) {
				var suiteType = testSuiteClasses[_g];
				++ _g;
				this.testSuites.push(Type.createInstance(suiteType,new Array()));
			};
		};
		var self = this;
		var runThread = neko.vm.Thread.create(function() = {
			self.execute();
			while ((self.running)) Sys.sleep(.2f);
			var mainThead = neko.vm.Thread.readMessage(true);
			mainThead.sendMessage("done");
		});
		runThread.sendMessage(neko.vm.Thread.current());
		neko.vm.Thread.readMessage(true);
	};

	public debug(method) : testSuiteClasses : Array<Class<massive.munit.TestSuite>> -> Void

	 = function(testSuiteClasses:Array<Class<massive.munit.TestSuite>>) = {
		this.isDebug = true;
		this.run(testSuiteClasses);
	};

	public addResultClient(method) : resultClient : massive.munit.ITestResultClient -> Void

	 = function(resultClient:massive.munit.ITestResultClient) = {
		{
			var _g = 0,_g1 = this.clients;
			while ((_g < _g1.length)) {
				var client = _g1[_g];
				++ _g;
				if ((client == resultClient))return);
			};
		};
		resultClient.set_completionHandler(this.clientCompletionHandler);
		this.clients.push(resultClient);
	};

	isDebug((default,null)) : Bool;

	testStartTime(var) : Float;

	startTime(var) : Float;

	emptyParams(var) : Array<Dynamic>;

	set_asyncFactory(method) : value : massive.munit.async.AsyncFactory -> massive.munit.async.AsyncFactory

	 = function(value:massive.munit.async.AsyncFactory) = {
		if ((value == this.asyncFactory))return value);
		if ((this.running))throw new massive.munit.MUnitException("Can't change AsyncFactory while tests are running",{fileName : "TestRunner.hx",lineNumber : 127,className : "massive.munit.TestRunner",methodName : "set_asyncFactory"}));
		value.observer = this;
		return this.asyncFactory = value;
	};

	public asyncFactory((default,set_asyncFactory)) : massive.munit.async.AsyncFactory;

	suiteIndex(var) : Int;

	asyncDelegate(var) : massive.munit.async.AsyncDelegate;

	asyncPending(var) : Bool;

	testSuites(var) : Array<massive.munit.TestSuite>;

	activeHelper(var) : massive.munit.TestClassHelper;

	clients(var) : Array<massive.munit.ITestResultClient>;

	clientCompleteCount(var) : Int;

	ignoreCount(var) : Int;

	passCount(var) : Int;

	errorCount(var) : Int;

	failCount(var) : Int;

	testCount(var) : Int;

	public running((default,null)) : Bool;

	get_clientCount(method) : Void -> Int

	 = function() = {
		return this.clients.length;
	};

	public clientCount((get_clientCount,null)) : Int;

	public completionHandler(var) : Bool -> Void;

}