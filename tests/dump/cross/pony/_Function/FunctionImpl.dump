private class pony._Function.FunctionImpl{
	static public unusedCount(var) : Int

	 = 0;

	static list(var) : Array<Dynamic>

	 = new Array();

	static _new(method) : f : Dynamic -> count : Int -> ?args : Array<Dynamic> -> { used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> }

	 = function(f:Dynamic,count:Int,args:Array<Dynamic> = null) = {
		var this1;
		var id = Lambda.indexOf(pony._Function.FunctionImpl.list,f);
		if ((id == -1)){
			id = pony._Function.FunctionImpl.list.length;
			pony._Function.FunctionImpl.list.push(f);
			haxe.Log.trace("cr",{fileName : "Function.hx",lineNumber : 23,className : "pony._Function.FunctionImpl",methodName : "_new"});
			pony._Function.FunctionImpl.unusedCount ++;
		});
		this1 = {f : f,count : count,args : if ((args == null))[] else args),id : id,used : 0};
		return this1;
	};

	static public from0<R : from0.R>(inline method) : f : (Void -> from0.R) -> pony.Function

	 = function(f:Void -> from0.R) = {
		return pony._Function.FunctionImpl._new(f,0);
	};

	static public from1<R : from1.R>(inline method) : f : (Dynamic -> from1.R) -> pony.Function

	 = function(f:Dynamic -> from1.R) = {
		return pony._Function.FunctionImpl._new(f,1);
	};

	static public from2<R : from2.R>(inline method) : f : (Dynamic -> Dynamic -> from2.R) -> pony.Function

	 = function(f:Dynamic -> Dynamic -> from2.R) = {
		return pony._Function.FunctionImpl._new(f,2);
	};

	static public from3<R : from3.R>(inline method) : f : (Dynamic -> Dynamic -> Dynamic -> from3.R) -> pony.Function

	 = function(f:Dynamic -> Dynamic -> Dynamic -> from3.R) = {
		return pony._Function.FunctionImpl._new(f,3);
	};

	static public from4<R : from4.R>(inline method) : f : (Dynamic -> Dynamic -> Dynamic -> Dynamic -> from4.R) -> pony.Function

	 = function(f:Dynamic -> Dynamic -> Dynamic -> Dynamic -> from4.R) = {
		return pony._Function.FunctionImpl._new(f,4);
	};

	static public from5<R : from5.R>(inline method) : f : (Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> from5.R) -> pony.Function

	 = function(f:Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> from5.R) = {
		return pony._Function.FunctionImpl._new(f,5);
	};

	static public from6<R : from6.R>(inline method) : f : (Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> from6.R) -> pony.Function

	 = function(f:Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> from6.R) = {
		return pony._Function.FunctionImpl._new(f,6);
	};

	static public from7<R : from7.R>(inline method) : f : (Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> from7.R) -> pony.Function

	 = function(f:Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> Dynamic -> from7.R) = {
		return pony._Function.FunctionImpl._new(f,7);
	};

	static public _call(inline method) : this : { used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> } -> args : Array<Dynamic> -> Dynamic

	 = function(this1:{ used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> },args:Array<Dynamic>) = {
		return Reflect.callMethod(null,this1.f,this1.args.concat(args));
	};

	static public count(inline method) : this : { used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> } -> Int

	 = function(this1:{ used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> }) = {
		return this1.count;
	};

	static public _bind(inline method) : this : { used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> } -> args : Array<Dynamic> -> pony.Function

	 = function(this1:{ used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> },args:Array<Dynamic>) = {
		return pony._Function.FunctionImpl._new(this1.f,this1.count - args.length,this1.args.concat(args));
	};

	static public _setArgs(inline method) : this : { used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> } -> args : Array<Dynamic> -> Void

	 = function(this1:{ used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> },args:Array<Dynamic>) = {
		this1.count -= args.length;
		this1.args = this1.args.concat(args);
	};

	static public id(inline method) : this : { used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> } -> Int

	 = function(this1:{ used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> }) = {
		return this1.id;
	};

	static public get(inline method) : this : { used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> } -> Dynamic

	 = function(this1:{ used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> }) = {
		return this1.f;
	};

	static public use(method) : this : { used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> } -> Void

	 = function(this1:{ used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> }) = {
		this1.used ++;
	};

	static public unuse(inline method) : this : { used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> } -> Void

	 = function(this1:{ used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> }) = {
		this1.used --;
		if ((this1.used <= 0)){
			pony._Function.FunctionImpl.list.splice(this1.id,1);
			this1 = null;
			pony._Function.FunctionImpl.unusedCount --;
			haxe.Log.trace(pony._Function.FunctionImpl.unusedCount,{fileName : "Function.hx",lineNumber : 81,className : "pony._Function.FunctionImpl",methodName : "unuse"});
		});
	};

	static public used(inline method) : this : { used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> } -> Int

	 = function(this1:{ used : Int, id : Int, f : Dynamic, count : Int, args : Array<Dynamic> }) = {
		return this1.used;
	};

}