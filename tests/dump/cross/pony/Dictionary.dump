class pony.Dictionary<K : pony.Dictionary.K,V : pony.Dictionary.V>{
	public new(method) : Void -> Void

	 = function() = {
		this.ks = [];
		this.vs = [];
	};

	public removeValue(method) : v : pony.Dictionary.V -> Void

	 = function(v:pony.Dictionary.V) = {
		var i = Lambda.indexOf(this.vs,v);
		if ((i != -1)){
			this.ks.splice(i,1);
			this.vs.splice(i,1);
		});
	};

	public toString(method) : Void -> String

	 = function() = {
		var a = [];
		for (k in this.keys()) a.push(Std.string(k) + ": " + Std.string(this.get(k)));
		return "[" + a.join(", ") + "]";
	};

	public keys(method) : Void -> Iterator<pony.Dictionary.K>

	 = function() = {
		return this.ks.iterator();
	};

	public iterator(method) : Void -> Iterator<pony.Dictionary.V>

	 = function() = {
		return this.vs.iterator();
	};

	public clear(method) : Void -> Void

	 = function() = {
		this.ks = [];
		this.vs = [];
	};

	public remove(method) : k : pony.Dictionary.K -> Void

	 = function(k:pony.Dictionary.K) = {
		var i = this.getIndex(k);
		if ((i != -1)){
			this.ks.splice(i,1);
			this.vs.splice(i,1);
		});
	};

	public exists(method) : k : pony.Dictionary.K -> Bool

	 = function(k:pony.Dictionary.K) = {
		return this.getIndex(k) != -1;
	};

	public get(method) : k : pony.Dictionary.K -> pony.Dictionary.V

	 = function(k:pony.Dictionary.K) = {
		var i = this.getIndex(k);
		if ((i == -1))return null else return this.vs[i]);
	};

	public set(method) : k : pony.Dictionary.K -> v : pony.Dictionary.V -> Void

	 = function(k:pony.Dictionary.K,v:pony.Dictionary.V) = {
		var i = this.getIndex(k);
		if ((i != -1))this.vs[i] = v else {
			this.ks.push(k);
			this.vs.push(v);
		});
	};

	getIndex(method) : k : pony.Dictionary.K -> Int

	 = function(k:pony.Dictionary.K) = {
		return Lambda.indexOf(this.ks,k);
	};

	public vs(var) : Array<pony.Dictionary.V>;

	public ks(var) : Array<pony.Dictionary.K>;

}