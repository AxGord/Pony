extern class Type{
	static public getClass<T : getClass.T>(method) : o : getClass.T -> Class<getClass.T>;

	static public getEnum(method) : o : EnumValue -> Enum<Dynamic>;

	static public getSuperClass(method) : c : Class<Dynamic> -> Class<Dynamic>;

	static public getClassName(method) : c : Class<Dynamic> -> String;

	static public getEnumName(method) : e : Enum<Dynamic> -> String;

	static public resolveClass(method) : name : String -> Class<Dynamic>;

	static public resolveEnum(method) : name : String -> Enum<Dynamic>;

	static public createInstance<T : createInstance.T>(method) : cl : Class<createInstance.T> -> args : Array<Dynamic> -> createInstance.T;

	static public createEmptyInstance<T : createEmptyInstance.T>(method) : cl : Class<createEmptyInstance.T> -> createEmptyInstance.T;

	static public createEnum<T : createEnum.T>(method) : e : Enum<createEnum.T> -> constr : String -> ?params : Array<Dynamic> -> createEnum.T;

	static public createEnumIndex<T : createEnumIndex.T>(method) : e : Enum<createEnumIndex.T> -> index : Int -> ?params : Array<Dynamic> -> createEnumIndex.T;

	static public getInstanceFields(method) : c : Class<Dynamic> -> Array<String>;

	static public getClassFields(method) : c : Class<Dynamic> -> Array<String>;

	static public getEnumConstructs(method) : e : Enum<Dynamic> -> Array<String>;

	static public typeof(method) : v : Dynamic -> ValueType;

	static public enumEq<T : enumEq.T>(method) : a : enumEq.T -> b : enumEq.T -> Bool;

	static public enumConstructor(method) : e : EnumValue -> String;

	static public enumParameters(method) : e : EnumValue -> Array<Dynamic>;

	static public enumIndex(method) : e : EnumValue -> Int;

	static public allEnums<T : allEnums.T>(method) : e : Enum<allEnums.T> -> Array<allEnums.T>;

}