class massive.munit.Assert{
	static public assertionCount(var) : Int

	 = 0;

	static public isTrue(method) : value : Bool -> ?info : haxe.PosInfos -> Void

	 = function(value:Bool,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		if ((value != true))massive.munit.Assert.fail("Expected TRUE but was [" + Std.string(value) + "]",info));
	};

	static public isFalse(method) : value : Bool -> ?info : haxe.PosInfos -> Void

	 = function(value:Bool,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		if ((value != false))massive.munit.Assert.fail("Expected FALSE but was [" + Std.string(value) + "]",info));
	};

	static public isNull(method) : value : Dynamic -> ?info : haxe.PosInfos -> Void

	 = function(value:Dynamic,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		if ((value != null))massive.munit.Assert.fail("Value [" + Std.string(value) + "] was not NULL",info));
	};

	static public isNotNull(method) : value : Dynamic -> ?info : haxe.PosInfos -> Void

	 = function(value:Dynamic,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		if ((value == null))massive.munit.Assert.fail("Value [" + Std.string(value) + "] was NULL",info));
	};

	static public isNaN(method) : value : Float -> ?info : haxe.PosInfos -> Void

	 = function(value:Float,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		if ((! Math.isNaN(value)))massive.munit.Assert.fail("Value [" + value + "]  was not NaN",info));
	};

	static public isNotNaN(method) : value : Float -> ?info : haxe.PosInfos -> Void

	 = function(value:Float,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		if ((Math.isNaN(value)))massive.munit.Assert.fail("Value [" + value + "] was NaN",info));
	};

	static public isType(method) : value : Dynamic -> type : Dynamic -> ?info : haxe.PosInfos -> Void

	 = function(value:Dynamic,type:Dynamic,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		if ((! Std.is(value,type)))massive.munit.Assert.fail("Value [" + Std.string(value) + "] was not of type: " + Type.getClassName(type),info));
	};

	static public isNotType(method) : value : Dynamic -> type : Dynamic -> ?info : haxe.PosInfos -> Void

	 = function(value:Dynamic,type:Dynamic,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		if ((Std.is(value,type)))massive.munit.Assert.fail("Value [" + Std.string(value) + "] was of type: " + Type.getClassName(type),info));
	};

	static public areEqual(method) : expected : Dynamic -> actual : Dynamic -> ?info : haxe.PosInfos -> Void

	 = function(expected:Dynamic,actual:Dynamic,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		var equal = {
			var _g = Type.typeof(expected);
			switch ((_g)) {case TEnum:Type.enumEq(expected,actual),default: expected == actual};
		};
		if ((! equal))massive.munit.Assert.fail("Value [" + Std.string(actual) + "] was not equal to expected value [" + Std.string(expected) + "]",info));
	};

	static public areNotEqual(method) : expected : Dynamic -> actual : Dynamic -> ?info : haxe.PosInfos -> Void

	 = function(expected:Dynamic,actual:Dynamic,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		var equal = {
			var _g = Type.typeof(expected);
			switch ((_g)) {case TEnum:Type.enumEq(expected,actual),default: expected == actual};
		};
		if ((equal))massive.munit.Assert.fail("Value [" + Std.string(actual) + "] was equal to value [" + Std.string(expected) + "]",info));
	};

	static public areSame(method) : expected : Dynamic -> actual : Dynamic -> ?info : haxe.PosInfos -> Void

	 = function(expected:Dynamic,actual:Dynamic,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		if ((expected != actual))massive.munit.Assert.fail("Value [" + Std.string(actual) + "] was not the same as expected value [" + Std.string(expected) + "]",info));
	};

	static public areNotSame(method) : expected : Dynamic -> actual : Dynamic -> ?info : haxe.PosInfos -> Void

	 = function(expected:Dynamic,actual:Dynamic,info:haxe.PosInfos = null) = {
		massive.munit.Assert.assertionCount ++;
		if ((expected == actual))massive.munit.Assert.fail("Value [" + Std.string(actual) + "] was the same as expected value [" + Std.string(expected) + "]",info));
	};

	static public fail(method) : msg : String -> ?info : haxe.PosInfos -> Void

	 = function(msg:String,info:haxe.PosInfos = null) = {
		throw new massive.munit.AssertionException(msg,info);
	};

}