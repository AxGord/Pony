class massive.munit.client.PrintClientBase extends massive.munit.client.AbstractTestResultClient{
	public new(method) : ?includeIgnoredReport : Null<Bool> -> Void

	 = function(includeIgnoredReport:Null<Bool> = true) = {
		super();
		this.id = "simple";
		this.verbose = false;
		this.includeIgnoredReport = includeIgnoredReport;
		this.printLine("MUnit Results");
		this.printLine(this.divider);
	};

	indentString(method) : value : String -> ?indent : Null<Int> -> String

	 = function(value:String,indent:Null<Int> = 0) = {
		if ((indent > 0))value = StringTools.lpad(""," ",indent * 4) + value);
		if ((value == ""))value = "");
		return value;
	};

	public printLine(method) : value : Dynamic -> ?indent : Null<Int> -> Void

	 = function(value:Dynamic,indent:Null<Int> = 0) = {
		value = Std.string(value);
		value = this.indentString(value,indent);
		this.print("\n" + Std.string(value));
	};

	public print(method) : value : Dynamic -> Void

	 = function(value:Dynamic) = {
		this.output += Std.string(value);
	};

	printOverallResult(method) : result : Bool -> Void

	 = function(result:Bool) = {
		this.printLine("");
	};

	printFinalStatistics(method) : result : Bool -> testCount : Int -> passCount : Int -> failCount : Int -> errorCount : Int -> ignoreCount : Int -> time : Float -> Void

	 = function(result:Bool,testCount:Int,passCount:Int,failCount:Int,errorCount:Int,ignoreCount:Int,time:Float) = {
		this.printLine(this.divider2);
		var resultString = if ((result))"PASSED" else "FAILED");
		resultString += "\n" + "Tests: " + testCount + "  Passed: " + passCount + "  Failed: " + failCount + " Errors: " + errorCount + " Ignored: " + ignoreCount + " Time: " + massive.munit.util.MathUtil.round(time,5);
		this.printLine(resultString);
		this.printLine("");
	};

	filterIngored(method) : result : massive.munit.TestResult -> Bool

	 = function(result:massive.munit.TestResult) = {
		return result.get_type() == massive.munit.TestResultType.IGNORE;
	};

	printFinalIgnoredStatistics(method) : count : Int -> Void

	 = function(count:Int) = {
		if ((! this.includeIgnoredReport || count == 0))return);
		var items = Lambda.filter(this.totalResults,this.filterIngored);
		if ((items.length == 0))return);
		this.printLine("");
		this.printLine("Ignored (" + count + "):");
		this.printLine(this.divider);
		for (result in items.iterator()) {
			var ingoredString = result.get_location();
			if ((result.description != null))ingoredString += " - " + result.description);
			this.printLine("IGNORE: " + ingoredString,1);
		};
		this.printLine("");
	};

	printReports(method) : Void -> Void

	 = function() = {
		this.printFinalIgnoredStatistics(this.ignoreCount);
	};

	printIndentedLines(method) : value : String -> ?indent : Int -> Void

	 = function(value:String,indent:Int = 1) = {
		var lines = value.split("\n");
		{
			var _g = 0;
			while ((_g < lines.length)) {
				var line = lines[_g];
				++ _g;
				this.printLine(line,indent);
			};
		};
	};

	public reportFinalCoverage(method) : ?percent : Null<Float> -> missingCoverageResults : Array<massive.munit.CoverageResult> -> summary : String -> ?classBreakdown : String -> ?packageBreakdown : String -> ?executionFrequency : String -> Void

	 = function(percent:Null<Float> = 0,missingCoverageResults:Array<massive.munit.CoverageResult>,summary:String,classBreakdown:String = null,packageBreakdown:String = null,executionFrequency:String = null) = {
		super.reportFinalCoverage(percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency);
		this.printLine("");
		this.printLine(this.divider);
		this.printLine("COVERAGE REPORT");
		this.printLine(this.divider);
		if ((missingCoverageResults != null && missingCoverageResults.length > 0)){
			this.printLine("MISSING CODE BLOCKS:");
			{
				var _g = 0;
				while ((_g < missingCoverageResults.length)) {
					var result = missingCoverageResults[_g];
					++ _g;
					this.printLine(result.className + " [" + result.percent + "%]",1);
					{
						var _g1 = 0,_g2 = result.blocks;
						while ((_g1 < _g2.length)) {
							var item = _g2[_g1];
							++ _g1;
							this.printIndentedLines(item,2);
						};
					};
					this.printLine("");
				};
			};
		});
		if ((executionFrequency != null)){
			this.printLine("CODE EXECUTION FREQUENCY:");
			this.printIndentedLines(executionFrequency,1);
			this.printLine("");
		});
		if ((classBreakdown != null))this.printIndentedLines(classBreakdown,0));
		if ((packageBreakdown != null))this.printIndentedLines(packageBreakdown,0));
		if ((summary != null))this.printIndentedLines(summary,0));
	};

	public setCurrentTestClassCoverage(method) : result : massive.munit.CoverageResult -> Void

	 = function(result:massive.munit.CoverageResult) = {
		super.setCurrentTestClassCoverage(result);
		this.print(" [" + result.percent + "%]");
	};

	finalizeTestClass(method) : Void -> Void

	 = function() = {
		super.finalizeTestClass();
		{
			var _g = 0,_g1 = this.getTraces();
			while ((_g < _g1.length)) {
				var item = _g1[_g];
				++ _g;
				this.printLine("TRACE: " + item,1);
			};
		};
		{
			var _g = 0,_g1 = this.currentClassResults;
			while ((_g < _g1.length)) {
				var result = _g1[_g];
				++ _g;
				{
					var _g2 = result.get_type();
					switch ((_g2)) {case ERROR:this.printLine("ERROR: " + Std.string(result.error),1),case FAIL:this.printLine("FAIL: " + Std.string(result.failure),1),case IGNORE:{
						var ingoredString = result.get_location();
						if ((result.description != null))ingoredString += " - " + result.description);
						this.printLine("IGNORE: " + ingoredString,1);
					},case PASS,UNKNOWN:null};
				};
			};
		};
	};

	updateTestClass(method) : result : massive.munit.TestResult -> Void

	 = function(result:massive.munit.TestResult) = {
		super.updateTestClass(result);
		if ((this.verbose))this.printLine(" " + result.name + ": " + Std.string(result.get_type()) + " ") else {
			var _g = result.get_type();
			switch ((_g)) {case PASS:this.print("."),case FAIL:this.print("!"),case ERROR:this.print("x"),case IGNORE:this.print(","),case UNKNOWN:null};
		});
	};

	initializeTestClass(method) : Void -> Void

	 = function() = {
		super.initializeTestClass();
		this.printLine("Class: " + this.currentTestClass + " ");
	};

	init(method) : Void -> Void

	 = function() = {
		super.init();
		this.divider = "------------------------------";
		this.divider2 = "==============================";
	};

	divider2(var) : String;

	divider(var) : String;

	includeIgnoredReport(var) : Bool;

	public verbose(var) : Bool;

	static public DEFAULT_ID((inline,never)) : String

	 = "simple";

}