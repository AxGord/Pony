class massive.munit.client.AbstractTestResultClient implements massive.munit.ICoverageTestResultClient implements massive.munit.IAdvancedTestResultClient{
	public new(method) : Void -> Void

	 = function() = {
		this.init();
	};

	sortTestResults(method) : a : massive.munit.TestResult -> b : massive.munit.TestResult -> Int

	 = function(a:massive.munit.TestResult,b:massive.munit.TestResult) = {
		var aInt = {
			var _g = a.get_type();
			switch ((_g)) {case ERROR:2,case FAIL:1,case IGNORE:0,case PASS:-1,default: -2};
		};
		var bInt = {
			var _g1 = b.get_type();
			switch ((_g1)) {case ERROR:2,case FAIL:1,case IGNORE:0,case PASS:-1,default: -2};
		};
		return aInt - bInt;
	};

	getTraces(method) : Void -> Array<String>

	 = function() = {
		return massive.munit.client.AbstractTestResultClient.traces.concat([]);
	};

	addTrace(method) : value : Dynamic -> ?info : haxe.PosInfos -> Void

	 = function(value:Dynamic,info:haxe.PosInfos = null) = {
		var traceString = info.fileName + "|" + info.lineNumber + "| " + Std.string(value);
		massive.munit.client.AbstractTestResultClient.traces.push(traceString);
	};

	printOverallResult(method) : result : Bool -> Void

	 = function(result:Bool) = {
	};

	printFinalStatistics(method) : result : Bool -> testCount : Int -> passCount : Int -> failCount : Int -> errorCount : Int -> ignoreCount : Int -> time : Float -> Void

	 = function(result:Bool,testCount:Int,passCount:Int,failCount:Int,errorCount:Int,ignoreCount:Int,time:Float) = {
	};

	printReports(method) : Void -> Void

	 = function() = {
	};

	finalizeTestClass(method) : Void -> Void

	 = function() = {
		this.currentClassResults.sort(this.sortTestResults);
	};

	updateTestClass(method) : result : massive.munit.TestResult -> Void

	 = function(result:massive.munit.TestResult) = {
		this.currentClassResults.push(result);
		this.totalResults.push(result);
	};

	initializeTestClass(method) : Void -> Void

	 = function() = {
		this.currentClassResults = [];
		massive.munit.client.AbstractTestResultClient.traces = [];
		this.passCount = 0;
		this.failCount = 0;
		this.errorCount = 0;
		this.ignoreCount = 0;
	};

	public reportFinalStatistics(method) : testCount : Int -> passCount : Int -> failCount : Int -> errorCount : Int -> ignoreCount : Int -> time : Float -> Dynamic

	 = function(testCount:Int,passCount:Int,failCount:Int,errorCount:Int,ignoreCount:Int,time:Float) = {
		this.finalResult = passCount == testCount;
		this.printReports();
		this.printFinalStatistics(this.finalResult,testCount,passCount,failCount,errorCount,ignoreCount,time);
		this.printOverallResult(this.finalResult);
		haxe.Log.trace = this.originalTrace;
		if ((this.get_completionHandler() != null))this.get_completionHandler()(this));
		return this.get_output();
	};

	public reportFinalCoverage(method) : ?percent : Null<Float> -> missingCoverageResults : Array<massive.munit.CoverageResult> -> summary : String -> ?classBreakdown : String -> ?packageBreakdown : String -> ?executionFrequency : String -> Void

	 = function(percent:Null<Float> = 0,missingCoverageResults:Array<massive.munit.CoverageResult>,summary:String,classBreakdown:String = null,packageBreakdown:String = null,executionFrequency:String = null) = {
		this.totalCoveragePercent = percent;
		this.totalCoverageResults = missingCoverageResults;
		this.totalCoverageReport = summary;
	};

	public setCurrentTestClassCoverage(method) : result : massive.munit.CoverageResult -> Void

	 = function(result:massive.munit.CoverageResult) = {
		this.currentCoverageResult = result;
	};

	public addIgnore(method) : result : massive.munit.TestResult -> Void

	 = function(result:massive.munit.TestResult) = {
		this.ignoreCount ++;
		this.updateTestClass(result);
	};

	public addError(method) : result : massive.munit.TestResult -> Void

	 = function(result:massive.munit.TestResult) = {
		this.errorCount ++;
		this.updateTestClass(result);
	};

	public addFail(method) : result : massive.munit.TestResult -> Void

	 = function(result:massive.munit.TestResult) = {
		this.failCount ++;
		this.updateTestClass(result);
	};

	public addPass(method) : result : massive.munit.TestResult -> Void

	 = function(result:massive.munit.TestResult) = {
		this.passCount ++;
		this.updateTestClass(result);
	};

	public setCurrentTestClass(method) : className : String -> Void

	 = function(className:String) = {
		if ((this.currentTestClass == className))return);
		if ((this.currentTestClass != null))this.finalizeTestClass());
		this.currentTestClass = className;
		if ((this.currentTestClass != null))this.initializeTestClass());
	};

	init(method) : Void -> Void

	 = function() = {
		this.currentTestClass = null;
		this.currentClassResults = [];
		massive.munit.client.AbstractTestResultClient.traces = [];
		this.passCount = 0;
		this.failCount = 0;
		this.errorCount = 0;
		this.ignoreCount = 0;
		this.currentCoverageResult = null;
		this.totalResults = [];
		this.totalCoveragePercent = 0;
		this.totalCoverageReport = null;
		this.totalCoverageResults = null;
	};

	finalResult(var) : Bool;

	originalTrace(var) : Dynamic;

	totalCoverageResults(var) : Array<massive.munit.CoverageResult>;

	totalCoverageReport(var) : String;

	totalCoveragePercent(var) : Float;

	totalResults(var) : Array<massive.munit.TestResult>;

	currentCoverageResult(var) : massive.munit.CoverageResult;

	currentClassResults(var) : Array<massive.munit.TestResult>;

	currentTestClass(var) : String;

	ignoreCount(var) : Int;

	errorCount(var) : Int;

	failCount(var) : Int;

	passCount(var) : Int;

	get_output(method) : Void -> String

	 = function() = {
		return this.output;
	};

	public output((get_output,null)) : String;

	set_completionHandler(method) : value : (massive.munit.ITestResultClient -> Void) -> (massive.munit.ITestResultClient -> Void)

	 = function(value:massive.munit.ITestResultClient -> Void) = {
		return this.completionHandler = value;
	};

	get_completionHandler(method) : Void -> (massive.munit.ITestResultClient -> Void)

	 = function() = {
		return this.completionHandler;
	};

	public completionHandler((get_completionHandler,set_completionHandler)) : massive.munit.ITestResultClient -> Void;

	public id((default,null)) : String;

	static traces(var) : Array<String>;

}